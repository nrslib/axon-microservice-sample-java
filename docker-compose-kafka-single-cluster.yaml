version: "3.5"
services:
  zookeeper:
    image: bitnami/zookeeper
    ports:
      - "2181:2181"
    environment:
        - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - network0

  kcat:
    image: confluentinc/cp-kcat
    command: sleep infinity
    networks:
      - network0

  kafka-0:
    image: bitnami/kafka
    hostname: kafka-0
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - network0

  kafka-rest-0:
    image: nodefluent/kafka-rest
    ports:
      - "8083:8083"
    depends_on:
      - kafka-0
      - zookeeper
    environment:
      DEBUG: "*"
      KAFKA_REST_DEBUG: "all"
      KAFKA_REST_HTTP_PORT: 8083
      KAFKA_REST_CONSUMER_METADATA_BROKER_LIST: "kafka-0:9092"
      KAFKA_REST_PRODUCER_METADATA_BROKER_LIST: "kafka-0:9092"
    networks:
      - network0

  kafka-rest-ui-0:
    image: nodefluent/kafka-rest-ui
    ports:
      - "8000:8000"
    depends_on:
      - kafka-rest
    environment:
      DEBUG: "*"
      REACT_APP_KAFKA_REST_URL: "http://kafka-rest-0:8083/"
      REACT_APP_TIMEOUT: "3000"
      PROXY: "yes"
      BASIC_AUTH_USER: "admin"
      BASIC_AUTH_PASSWORD: "admin"
    networks:
      - network0

  kafka-1:
    image: bitnami/kafka
    hostname: kafka-1
    ports:
      - "9192:9092"
      - "29192:29092"
    depends_on:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29192
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - network0

  kafka-rest-1:
    image: nodefluent/kafka-rest
    ports:
      - "8183:8083"
    depends_on:
      - kafka-1
      - zookeeper
    environment:
      DEBUG: "*"
      KAFKA_REST_DEBUG: "all"
      KAFKA_REST_HTTP_PORT: 8083
      KAFKA_REST_CONSUMER_METADATA_BROKER_LIST: "kafka-1:9092"
      KAFKA_REST_PRODUCER_METADATA_BROKER_LIST: "kafka-1:9092"
    networks:
      - network0

  kafka-rest-ui-1:
    image: nodefluent/kafka-rest-ui
    ports:
      - "8001:8000"
    depends_on:
      - kafka-rest-1
    environment:
      DEBUG: "*"
      REACT_APP_KAFKA_REST_URL: "http://kafka-rest-1:8083/"
      REACT_APP_TIMEOUT: "3000"
      PROXY: "yes"
      BASIC_AUTH_USER: "admin"
      BASIC_AUTH_PASSWORD: "admin"
    networks:
      - network0

  kafka-2:
    image: bitnami/kafka
    hostname: kafka-2
    ports:
      - "9292:9092"
      - "29292:29092"
    depends_on:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:29292
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
    networks:
      - network0

  kafka-rest-2:
    image: nodefluent/kafka-rest
    ports:
      - "8283:8083"
    depends_on:
      - kafka-2
      - zookeeper
    environment:
      DEBUG: "*"
      KAFKA_REST_DEBUG: "all"
      KAFKA_REST_HTTP_PORT: 8083
      KAFKA_REST_CONSUMER_METADATA_BROKER_LIST: "kafka-2:9092"
      KAFKA_REST_PRODUCER_METADATA_BROKER_LIST: "kafka-2:9092"
    networks:
      - network0

  kafka-rest-ui-2:
    image: nodefluent/kafka-rest-ui
    ports:
      - "8002:8000"
    depends_on:
      - kafka-rest-2
    environment:
      DEBUG: "*"
      REACT_APP_KAFKA_REST_URL: "http://kafka-rest-2:8083/"
      REACT_APP_TIMEOUT: "3000"
      PROXY: "yes"
      BASIC_AUTH_USER: "admin"
      BASIC_AUTH_PASSWORD: "admin"
    networks:
      - network0

  init-kafka:
    image: confluentinc/cp-kafka
    depends_on:
      - kafka-0
      - kafka-1
      - kafka-2
    entrypoint: [ '/bin/sh', '-c']
    command: |
      "
      # Blocks until kafka is reachable
      echo 'checking kafka-0'
      cat <<EOS > wait.sh
      while :
      do
        kafka-topics --bootstrap-server kafka-0:9092 --list
        if [ "$$?" = "0" ]; then
          echo 'ok'
          break
        fi
        echo 'sleeping'
        sleep 1
      done
      EOS
      
      chmod 755 ./wait.sh
      ./wait.sh 
      rm ./wait.sh
      
      echo 'checking kafka-1'
      cat <<EOS > wait.sh
      while :
      do
        kafka-topics --bootstrap-server kafka-1:9092 --list
        if [ "$$?" = "0" ]; then
          echo 'ok'
          break
        fi
        echo 'sleeping'
        sleep 1
      done
      EOS
      
      chmod 755 ./wait.sh
      ./wait.sh 
      rm ./wait.sh
      
      echo 'check kafka-2'
      cat <<EOS > wait.sh
      while :
      do
        kafka-topics --bootstrap-server kafka-2:9092 --list
        if [ "$$?" = "0" ]; then
          echo 'ok'
          break
        fi
        echo 'sleeping'
        sleep 1
      done
      EOS
      
      chmod 755 ./wait.sh
      ./wait.sh 
      rm ./wait.sh
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-0:9092 --topic axon-order-topic --create --if-not-exists --replication-factor 3 --partitions 1
      kafka-topics --bootstrap-server kafka-0:9092 --topic axon-payment-topic --create --if-not-exists --replication-factor 3 --partitions 1
      kafka-topics --bootstrap-server kafka-0:9092 --topic axon-warehouse-topic --create --if-not-exists --replication-factor 3 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-0:9092 --list
      "
    networks:
      - network0

  # Data store
  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_USER: docker
      MYSQL_PASSWORD: mysql
      TZ: 'Asia/Tokyo'
    ports:
      - "3306:3306"

networks:
  network0: